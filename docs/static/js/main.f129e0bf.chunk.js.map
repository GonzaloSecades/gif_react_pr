{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","components/GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","action","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","href","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"sLAKaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEXC,mBAAS,IAFE,mBAExCC,EAFwC,KAE5BC,EAF4B,KAoB/C,OACA,sBAAMC,OAAO,SAASC,SAXD,SAACC,GACrBA,EAAEC,iBAECL,EAAWM,OAAOC,OAAO,IAC3BT,GAAc,SAAAU,GAAI,OAAKR,GAAL,mBAAmBQ,OACrCP,EAAc,MAMhB,SACC,uBACCQ,KAAK,OACLC,MAAQV,EACRW,SArBwB,SAACP,GAC1BH,EAAcG,EAAEQ,OAAOF,a,8BCVZG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEjBC,EAFiB,iDAE+BC,UAAUH,GAFzC,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKAA,EAAKC,OALL,uBAKdC,EALc,EAKdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAM,IAAD,EAC5B,MAAO,CACLC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAXd,kBAedM,GAfc,4CAAH,sDCEPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACC,sBAAKc,UAAU,yCAAf,UACC,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,IACJ,mBAAGO,KAAMjB,EAAT,sBCHUkB,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAY,IAAD,EAEdf,mBAAS,CACnCsB,KAAK,GACLc,SAAQ,IAJgC,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAoBxC,OAbAC,qBAAW,WACXzB,EAAQC,GACLyB,MAAK,SAAAC,GAEJH,EAAS,CACThB,KAAKmB,EACLL,SAAQ,SAGT,CAAErB,IAIEsB,EDhByBK,CAAa3B,GAA/Ba,EAFyB,EAE9BN,KAAYc,EAFkB,EAElBA,QAIrB,OACE,qCAEE,oBAAIL,UAAU,oCAAd,SAAmDhB,IAElDqB,GAAW,mBAAGL,UAAU,mCAAb,wBAEV,qBAAKA,UAAU,YAAf,SAECH,EAAOJ,KAAI,SAAAC,GAAG,OACb,wBAAC,EAAD,2BACIA,GADJ,IAEAkB,IAAKlB,EAAIC,eEgBFkB,MAlCf,WAAyB,IAAD,EAEa5C,mBAAS,CAAC,SAFvB,mBAEhB6C,EAFgB,KAEJ9C,EAFI,KAWvB,OACC,qCACA,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACC,6BAEE8C,EAAWrB,KAAK,SAAAT,GAAQ,OAEvB,cAAC,EAAD,CACCA,SAAUA,GACLA,Y,MClBZ+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f129e0bf.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\n\n\nexport const AddCategory = ({setCategories}) => {\n\n const [inputValue, setInputValue] = useState('');\n\n const handleInputChange = (e)=>{\n  setInputValue(e.target.value)\n }\n\n \n\n const handleSubmit = (e)=>{\n  e.preventDefault()\n\n  if(inputValue.trim().length>0){\n   setCategories(cats => [inputValue,...cats] )\n   setInputValue('')\n  }\n\n }\n\n return (\n <form action=\"submit\" onSubmit={handleSubmit}>\n  <input\n   type='text'\n   value ={inputValue}\n   onChange={handleInputChange}\n  />\n </form>\n \n )\n}\n\nAddCategory.propTypes = {\n setCategories:PropTypes.func.isRequired\n}\n\n\n\n\n","export const getGifs = async(category)=>{\n\nconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=m0R0tsZ28LX949gqTEpQqajbHbGDZzkD`\n\n  const resp = await fetch(url)\n  const {data} = await resp.json()\n  \n  const gifs = data.map (img=>{\n  return {\n    id:img.id,\n    title:img.title,\n    url:img.images?.downsized_medium.url\n  }\n  })\n\n  return gifs\n}","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n //console.table(id,title,url)\n return (\n  <div className='card animate__animated animate__fadeIn'>\n   <img src={url} alt={title}/>\n   <p>{title}</p>\n   <a href={url}>Link</a>\n  </div>\n )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n  // Custom Hook\n  const {data:images,loading} = useFetchGifs(category) \n\n\n\nreturn (\n  <>\n\n    <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n\n    {loading && <p className='animate__animated animate__flash'>Loading...</p>}\n\n    { <div className='card-grid'>\n      \n      {images.map(img=>\n        <GifGridItem \n        {...img}\n        key={img.id}\n        />\n      )}\n      \n    </div> }\n\n  </>\n)\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category)=>{\n\nconst [state, setState] = useState({\ndata:[],\nloading:true\n});\n\nuseEffect( ()=>{\ngetGifs(category)\n  .then(imgs=>{\n  \n    setState({\n    data:imgs,\n    loading:false\n    })\n  })\n}, [ category ] )\n\n\n\nreturn state;\n\n}","import { useState } from \"react\"\nimport { AddCategory } from \"./AddCategory\"\nimport { GifGrid } from \"./GifGrid\"\n\n\nfunction GifExpertApp() {\n\n const [categories, setCategories] = useState(['Goku'])\n\n // const handleAdd = ()=>{\n //  //setCategories([...categories,'Duki'])\n //  setCategories(cats => [...cats,'Riquelme'] )\n // }\n\n\n\n return (\n  <>\n  <h2>Gif Expert App</h2>\n  <AddCategory setCategories={setCategories}/>\n  <hr/>\n   <ol>\n    {\n     categories.map( category => \n      \n      <GifGrid\n       category={category}\n       key={category}\n      />\n\n     )\n    }\n   </ol>\n  </>\n )\n}\n\n\n\nexport default GifExpertApp\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './components/GifExpertApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}